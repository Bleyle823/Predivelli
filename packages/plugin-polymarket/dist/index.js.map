{"version":3,"sources":["../src/provider.ts","../src/actions.ts","../src/index.ts"],"sourcesContent":["import type { Provider, IAgentRuntime } from \"@elizaos/core\";\nimport { http, createWalletClient } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { polygon } from \"viem/chains\";\nimport { getOnChainTools } from \"@goat-sdk/adapter-vercel-ai\";\nimport { polymarket } from \"@goat-sdk/plugin-polymarket\";\nimport { viem } from \"@goat-sdk/wallet-viem\";\n\n// Define the return type for the function\ntype PolymarketClient = {\n    tools: Awaited<ReturnType<typeof getOnChainTools>>;\n    walletClient: ReturnType<typeof createWalletClient>;\n    account: ReturnType<typeof privateKeyToAccount>;\n};\n\nexport async function getPolymarketClient(runtime?: IAgentRuntime): Promise<PolymarketClient> {\n    // Validate required environment variables\n    const apiKey = runtime?.getSetting(\"POLYMARKET_API_KEY\") || process.env.POLYMARKET_API_KEY;\n    const apiSecret = runtime?.getSetting(\"POLYMARKET_SECRET\") || process.env.POLYMARKET_SECRET;\n    const apiPassphrase = runtime?.getSetting(\"POLYMARKET_PASSPHRASE\") || process.env.POLYMARKET_PASSPHRASE;\n    const walletPrivateKey = runtime?.getSetting(\"WALLET_PRIVATE_KEY\") || process.env.WALLET_PRIVATE_KEY;\n    const rpcProviderUrl = runtime?.getSetting(\"RPC_PROVIDER_URL\") || process.env.RPC_PROVIDER_URL;\n\n    if (!apiKey || !apiSecret || !apiPassphrase) {\n        throw new Error(\"Missing required Polymarket API credentials. Please set POLYMARKET_API_KEY, POLYMARKET_SECRET, and POLYMARKET_PASSPHRASE environment variables or in character settings.\");\n    }\n\n    if (!walletPrivateKey || !rpcProviderUrl) {\n        throw new Error(\"Missing required wallet configuration. Please set WALLET_PRIVATE_KEY and RPC_PROVIDER_URL environment variables or in character settings.\");\n    }\n\n    try {\n        // Create wallet client\n        const account = privateKeyToAccount(walletPrivateKey as `0x${string}`);\n        const walletClient = createWalletClient({\n            account: account,\n            transport: http(rpcProviderUrl),\n            chain: polygon,\n        });\n\n        // Create Polymarket tools\n        const tools = await getOnChainTools({\n            wallet: viem(walletClient),\n            plugins: [\n                polymarket({\n                    credentials: {\n                        key: apiKey,\n                        secret: apiSecret,\n                        passphrase: apiPassphrase,\n                    },\n                }),\n            ],\n        });\n\n        return { tools, walletClient, account };\n    } catch (error) {\n        console.error(\"Failed to initialize Polymarket client:\", error);\n        throw new Error(`Failed to initialize Polymarket client: ${error.message || 'Unknown error'}`);\n    }\n}\n\nexport const walletProvider: Provider = {\n    async get(runtime: IAgentRuntime): Promise<string | null> {\n        try {\n            const { account } = await getPolymarketClient(runtime);\n            return `Polymarket Wallet Address: ${account.address}`;\n        } catch (error) {\n            console.error(\"Error in Polymarket provider:\", error);\n            return `Error initializing Polymarket wallet: ${error.message}`;\n        }\n    },\n};","import { type IAgentRuntime } from \"@elizaos/core\";\nimport { http } from \"viem\";\nimport { createWalletClient } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { polygon } from \"viem/chains\";\nimport { getOnChainTools } from \"@goat-sdk/adapter-vercel-ai\";\nimport { polymarket } from \"@goat-sdk/plugin-polymarket\";\nimport { viem } from \"@goat-sdk/wallet-viem\";\n\n// Cache for the Polymarket client to avoid recreating it\nlet cachedPolymarketTools: any = null;\n\n/**\n * Get Polymarket client using GOAT SDK\n */\nexport async function getPolymarketClient(runtime: IAgentRuntime): Promise<any> {\n    try {\n        // Return cached tools if available\n        if (cachedPolymarketTools) {\n            console.log(\"Returning cached Polymarket tools\");\n            return cachedPolymarketTools;\n        }\n\n        // Get environment variables from runtime settings\n        const privateKey = runtime.getSetting(\"WALLET_PRIVATE_KEY\") || process.env.WALLET_PRIVATE_KEY;\n        const rpcUrl = runtime.getSetting(\"RPC_PROVIDER_URL\") || process.env.RPC_PROVIDER_URL;\n        const apiKey = runtime.getSetting(\"POLYMARKET_API_KEY\") || process.env.POLYMARKET_API_KEY;\n        const apiSecret = runtime.getSetting(\"POLYMARKET_SECRET\") || process.env.POLYMARKET_SECRET;\n        const passphrase = runtime.getSetting(\"POLYMARKET_PASSPHRASE\") || process.env.POLYMARKET_PASSPHRASE;\n\n        if (!privateKey) {\n            throw new Error(\"WALLET_PRIVATE_KEY is required\");\n        }\n\n        if (!rpcUrl) {\n            throw new Error(\"RPC_PROVIDER_URL is required\");\n        }\n\n        if (!apiKey || !apiSecret || !passphrase) {\n            throw new Error(\"Polymarket API credentials (key, secret, passphrase) are required\");\n        }\n\n        console.log(\"Creating Polymarket client with GOAT SDK...\");\n\n        // Create wallet account\n        const account = privateKeyToAccount(privateKey as `0x${string}`);\n\n        // Create wallet client\n        const walletClient = createWalletClient({\n            account: account,\n            transport: http(rpcUrl),\n            chain: polygon,\n        });\n\n        console.log(\"Wallet client created, getting onchain tools...\");\n\n        // Get onchain tools with Polymarket plugin\n        const tools = await getOnChainTools({\n            wallet: viem(walletClient),\n            plugins: [\n                polymarket({\n                    credentials: {\n                        key: apiKey as string,\n                        secret: apiSecret as string,\n                        passphrase: passphrase as string,\n                    },\n                }),\n            ],\n        });\n\n        console.log(\"GOAT tools created successfully. Tool names:\", Object.keys(tools));\n\n        // Cache the tools\n        cachedPolymarketTools = tools;\n\n        return tools;\n    } catch (error) {\n        console.error(\"Error creating Polymarket client:\", error);\n        throw error;\n    }\n}\n\n/**\n * Clear the cached client (useful for testing or if credentials change)\n */\nexport function clearPolymarketClientCache(): void {\n    cachedPolymarketTools = null;\n    console.log(\"Polymarket client cache cleared\");\n}\n\n/**\n * Check if Polymarket client is configured\n */\nexport function isPolymarketConfigured(runtime: IAgentRuntime): boolean {\n    const privateKey = runtime.getSetting(\"WALLET_PRIVATE_KEY\") || process.env.WALLET_PRIVATE_KEY;\n    const rpcUrl = runtime.getSetting(\"RPC_PROVIDER_URL\") || process.env.RPC_PROVIDER_URL;\n    const apiKey = runtime.getSetting(\"POLYMARKET_API_KEY\") || process.env.POLYMARKET_API_KEY;\n    const apiSecret = runtime.getSetting(\"POLYMARKET_SECRET\") || process.env.POLYMARKET_SECRET;\n    const passphrase = runtime.getSetting(\"POLYMARKET_PASSPHRASE\") || process.env.POLYMARKET_PASSPHRASE;\n\n    return !!(privateKey && rpcUrl && apiKey && apiSecret && passphrase);\n}\n\n/**\n * Get wallet address from runtime\n */\nexport function getWalletAddress(runtime: IAgentRuntime): string {\n    const privateKey = runtime.getSetting(\"WALLET_PRIVATE_KEY\") || process.env.WALLET_PRIVATE_KEY;\n    \n    if (!privateKey) {\n        throw new Error(\"WALLET_PRIVATE_KEY is required to get wallet address\");\n    }\n\n    const account = privateKeyToAccount(privateKey as `0x${string}`);\n    return account.address;\n}","import type { Plugin, Character, Action, IAgentRuntime, Memory, State, HandlerCallback } from \"@elizaos/core\";\nimport { walletProvider } from \"./provider\";\nimport { getPolymarketClient, isPolymarketConfigured, getWalletAddress } from \"./actions\";\n\n// Initial banner\nconsole.log(\"\\n╔═══════════════════════════════════════════════════════════════════════════════════════╗\");\nconsole.log(\"║                                                            ║\");\nconsole.log(\"║  ██████╗  ██████╗ ██╗   ██╗   ██╗███╗   ███╗ █████╗ ██████╗ ██╗  ██╗███████╗████████╗ ║\");\nconsole.log(\"║  ██╔══██╗██╔═══██╗██║   ╚██╗ ██╔╝████╗ ████║██╔══██╗██╔══██╗██║ ██╔╝██╔════╝╚══██╔══╝ ║\");\nconsole.log(\"║  ██████╔╝██║   ██║██║    ╚████╔╝ ██╔████╔██║███████║██████╔╝█████╔╝ █████╗     ██║    ║\");\nconsole.log(\"║  ██╔═══╝ ██║   ██║██║     ╚██╔╝  ██║╚██╔╝██║██╔══██║██╔══██╗██╔═██╗ ██╔══╝     ██║    ║\");\nconsole.log(\"║  ██║     ╚██████╔╝███████╗ ██║   ██║ ╚═╝ ██║██║  ██║██║  ██║██║  ██╗███████╗   ██║    ║\");\nconsole.log(\"║  ╚═╝      ╚═════╝ ╚══════╝ ╚═╝   ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝   ╚═╝    ║\");\n\n/**\n * Create Polymarket actions using the existing client functions\n */\nconst createPolymarketActions = (): Action[] => {\n    return [\n        {\n            name: \"GET_POLYMARKET_STATUS\",\n            similes: [\"POLYMARKET_STATUS\", \"CHECK_POLYMARKET\", \"POLYMARKET_INFO\"],\n            description: \"Check Polymarket connection status and wallet information\",\n            validate: async () => true,\n            handler: async (\n                runtime: IAgentRuntime,\n                message: Memory,\n                state: State | undefined,\n                options?: Record<string, unknown>,\n                callback?: HandlerCallback\n            ): Promise<boolean> => {\n                try {\n                    // Check if Polymarket is configured\n                    if (!isPolymarketConfigured(runtime)) {\n                        const errorMsg = \"Polymarket is not properly configured. Please set the required environment variables.\";\n                        callback?.({ \n                            text: errorMsg, \n                            content: { error: errorMsg, configured: false } \n                        });\n                        return false;\n                    }\n\n                    // Get wallet address\n                    const walletAddress = getWalletAddress(runtime);\n                    \n                    // Try to get the client (this will test the connection)\n                    const client = await getPolymarketClient(runtime);\n                    \n                    const statusInfo = {\n                        configured: true,\n                        walletAddress,\n                        toolsAvailable: Object.keys(client).length,\n                        toolNames: Object.keys(client)\n                    };\n\n                    const responseText = `✅ Polymarket is properly configured and connected!\n\n🔗 Wallet Address: ${walletAddress}\n🛠️ Available Tools: ${statusInfo.toolsAvailable}\n📋 Tools: ${statusInfo.toolNames.join(', ')}\n\nYou can now use Polymarket features like viewing markets, placing orders, and managing your positions.`;\n\n                    callback?.({ text: responseText, content: statusInfo });\n                    return true;\n                } catch (error) {\n                    const errorMessage = error instanceof Error ? error.message : String(error);\n                    const errorResponse = `❌ Error checking Polymarket status: ${errorMessage}`;\n                    callback?.({ \n                        text: errorResponse, \n                        content: { error: errorMessage, configured: false } \n                    });\n                    return false;\n                }\n            },\n            examples: [\n                [\n                    {\n                        user: \"{{user1}}\",\n                        content: { text: \"Check my Polymarket status\" }\n                    },\n                    {\n                        user: \"{{user2}}\",\n                        content: { text: \"✅ Polymarket is properly configured and connected!...\" }\n                    }\n                ]\n            ]\n        },\n        {\n            name: \"GET_POLYMARKET_TOOLS\",\n            similes: [\"LIST_TOOLS\", \"SHOW_TOOLS\", \"AVAILABLE_TOOLS\"],\n            description: \"List all available Polymarket tools and their capabilities\",\n            validate: async () => true,\n            handler: async (\n                runtime: IAgentRuntime,\n                message: Memory,\n                state: State | undefined,\n                options?: Record<string, unknown>,\n                callback?: HandlerCallback\n            ): Promise<boolean> => {\n                try {\n                    if (!isPolymarketConfigured(runtime)) {\n                        const errorMsg = \"Polymarket is not configured. Please set up your credentials first.\";\n                        callback?.({ \n                            text: errorMsg, \n                            content: { error: errorMsg } \n                        });\n                        return false;\n                    }\n\n                    const client = await getPolymarketClient(runtime);\n                    const tools = Object.keys(client);\n                    \n                    let responseText = \"🛠️ Available Polymarket Tools:\\n\\n\";\n                    \n                    tools.forEach((toolName, index) => {\n                        responseText += `${index + 1}. **${toolName}**\\n`;\n                        // Add description if available\n                        if (client[toolName] && typeof client[toolName] === 'object') {\n                            const tool = client[toolName];\n                            if (tool.description) {\n                                responseText += `   Description: ${tool.description}\\n`;\n                            }\n                        }\n                        responseText += \"\\n\";\n                    });\n\n                    responseText += `\\nTotal tools available: ${tools.length}`;\n\n                    callback?.({ \n                        text: responseText, \n                        content: { \n                            tools: tools,\n                            totalTools: tools.length,\n                            toolDetails: tools.map(name => ({ name, available: true }))\n                        } \n                    });\n                    return true;\n                } catch (error) {\n                    const errorMessage = error instanceof Error ? error.message : String(error);\n                    const errorResponse = `❌ Error getting Polymarket tools: ${errorMessage}`;\n                    callback?.({ \n                        text: errorResponse, \n                        content: { error: errorMessage } \n                    });\n                    return false;\n                }\n            },\n            examples: [\n                [\n                    {\n                        user: \"{{user1}}\",\n                        content: { text: \"What Polymarket tools are available?\" }\n                    },\n                    {\n                        user: \"{{user2}}\",\n                        content: { text: \"🛠️ Available Polymarket Tools:...\" }\n                    }\n                ]\n            ]\n        }\n    ];\n};\n\nconst initializeActions = async (character?: Character) => {\n    try {\n        // Validate environment variables\n        const apiKey = character?.settings?.secrets?.POLYMARKET_API_KEY || process.env.POLYMARKET_API_KEY;\n        const apiSecret = character?.settings?.secrets?.POLYMARKET_SECRET || process.env.POLYMARKET_SECRET;\n        const apiPassphrase = character?.settings?.secrets?.POLYMARKET_PASSPHRASE || process.env.POLYMARKET_PASSPHRASE;\n        const walletPrivateKey = character?.settings?.secrets?.WALLET_PRIVATE_KEY || process.env.WALLET_PRIVATE_KEY;\n        const rpcProviderUrl = character?.settings?.secrets?.RPC_PROVIDER_URL || process.env.RPC_PROVIDER_URL;\n\n        if (!apiKey || !apiSecret || !apiPassphrase) {\n            console.warn(\"⚠️ Missing Polymarket API credentials - Polymarket actions will not be available\");\n            return [];\n        }\n\n        if (!walletPrivateKey || !rpcProviderUrl) {\n            console.warn(\"⚠️ Missing wallet configuration - Polymarket actions will not be available\");\n            return [];\n        }\n\n        const actions = createPolymarketActions();\n        console.log(\"✔ Polymarket actions initialized successfully.\");\n        return actions;\n    } catch (error) {\n        console.error(\"❌ Failed to initialize Polymarket actions:\", error);\n        return []; // Return empty array instead of failing\n    }\n};\n\nexport const polymarketPlugin: Plugin = {\n    name: \"[Polymarket] Integration\",\n    description: \"Polymarket prediction market integration plugin\",\n    providers: [walletProvider],\n    evaluators: [],\n    services: [],\n    actions: [], // Initialize as empty array, will be populated when plugin is loaded\n    handlePostCharacterLoaded: async (character: Character): Promise<Character> => {\n        // Initialize actions when character is loaded with character context\n        const actions = await initializeActions(character);\n        polymarketPlugin.actions = actions;\n        return character;\n    }\n};\n\n// Initialize actions when plugin is loaded (fallback for backward compatibility)\ninitializeActions().then(actions => {\n    if (polymarketPlugin.actions && polymarketPlugin.actions.length === 0) {\n        polymarketPlugin.actions = actions;\n    }\n}).catch(error => {\n    console.error(\"Failed to initialize Polymarket plugin actions:\", error);\n    if (polymarketPlugin.actions && polymarketPlugin.actions.length === 0) {\n        polymarketPlugin.actions = [];\n    }\n});\n\nexport default polymarketPlugin;"],"mappings":"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","names":["http","createWalletClient","privateKeyToAccount","polygon","getOnChainTools","polymarket","viem","getPolymarketClient","privateKeyToAccount","getPolymarketClient"]}