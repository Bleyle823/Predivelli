{"version":3,"sources":["../src/provider.ts","../src/actions.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import type { Provider, IAgentRuntime } from \"@elizaos/core\";\nimport { ClobClient, Chain } from \"@polymarket/clob-client\";\n\nexport async function getPolymarketClient(): Promise<ClobClient> {\n    // Get configuration from environment variables\n    const host = process.env.CLOB_API_URL || \"https://clob.polymarket.com\";\n    const chainId = parseInt(`${process.env.CHAIN_ID || Chain.POLYGON}`) as Chain;\n    \n    // For authenticated operations, you might need these\n    const apiKey = process.env.POLYMARKET_API_KEY;\n    const secret = process.env.POLYMARKET_SECRET;\n    const passphrase = process.env.POLYMARKET_PASSPHRASE;\n\n    try {\n        // Initialize ClobClient with host and chainId\n        const client = new ClobClient(host, chainId);\n        \n        // If credentials are provided, you might need to authenticate\n        // This depends on the specific API requirements\n        if (apiKey && secret && passphrase) {\n            console.log(\"🔐 Polymarket credentials detected - authenticated mode\");\n            // The authentication might be handled differently depending on the client version\n            // You may need to call specific auth methods here\n        } else {\n            console.log(\"📖 Polymarket running in read-only mode\");\n        }\n        \n        return client;\n    } catch (error) {\n        console.error(\"Failed to initialize Polymarket ClobClient:\", error);\n        throw new Error(`Failed to initialize Polymarket ClobClient: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n\nexport const polymarketProvider: Provider = {\n    async get(runtime: IAgentRuntime): Promise<string | null> {\n        try {\n            const client = await getPolymarketClient();\n            \n            // Test the connection by fetching markets\n            const markets = await client.getMarkets();\n            const marketCount = Array.isArray(markets?.data) ? markets.data.length : \n                              Array.isArray(markets) ? markets.length : 0;\n            \n            return `Polymarket Client: Connected (${marketCount} markets available)`;\n        } catch (error) {\n            console.error(\"Error in Polymarket provider:\", error);\n            return `Error connecting to Polymarket: ${error instanceof Error ? error.message : 'Unknown error'}`;\n        }\n    },\n};\n\n// Legacy provider for backward compatibility\nexport const walletProvider = polymarketProvider;\n\n// Legacy function for backward compatibility  \nexport const getClient = getPolymarketClient;","import {\n    type Action,\n    generateText,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    composeContext,\n    generateObject,\n} from \"@elizaos/core\";\nimport { ClobClient, OrderType, Side, AssetType } from \"@polymarket/clob-client\";\nimport { getPolymarketClient } from \"./provider\";\nimport { z } from \"zod\";\n\n// Schema definitions for action parameters\nconst PlaceBetSchema = z.object({\n    tokenId: z.string().describe(\"The token ID of the market outcome\"),\n    side: z.enum([\"BUY\", \"SELL\"]).describe(\"Whether to buy or sell the outcome\"),\n    amount: z.number().positive().describe(\"Amount of USDC to bet\"),\n    price: z.number().min(0.01).max(0.99).describe(\"Price per share (0.01 to 0.99)\"),\n});\n\nconst CheckBalanceSchema = z.object({});\n\nconst GetMarketsSchema = z.object({\n    limit: z.number().optional().describe(\"Maximum number of markets to return\"),\n    active: z.boolean().optional().describe(\"Filter for active markets only\"),\n});\n\nconst GetMarketSchema = z.object({\n    conditionId: z.string().describe(\"The condition ID of the market\"),\n});\n\nconst GetMoreMarketsSchema = z.object({\n    cursor: z.string().describe(\"The cursor for pagination to get next batch of markets\"),\n    limit: z.number().optional().describe(\"Maximum number of markets to return\"),\n});\n\nconst CancelOrderSchema = z.object({\n    orderId: z.string().describe(\"The ID of the order to cancel\"),\n});\n\n// Place Bet Action\nexport const placeBetAction: Action = {\n    name: \"PLACE_BET\",\n    description: \"Place a bet on a Polymarket outcome\",\n    similes: [\"bet\", \"wager\", \"place order\", \"buy shares\", \"sell shares\"],\n    validate: async () => true,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        options?: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const client = await getPolymarketClient();\n            let currentState = state ?? (await runtime.composeState(message));\n            currentState = await runtime.updateRecentMessageState(currentState);\n\n            const parameterContext = composeContext({\n                state: currentState,\n                template: `{{recentMessages}}\n\nExtract the following information for placing a bet:\n- tokenId: The token ID of the market outcome\n- side: Whether to BUY or SELL\n- amount: Amount of USDC to bet\n- price: Price per share (between 0.01 and 0.99)\n\nRespond with a JSON object containing these parameters.`\n            });\n\n            const { object: parameters } = await generateObject({\n                runtime,\n                context: parameterContext,\n                modelClass: ModelClass.LARGE,\n                schema: PlaceBetSchema,\n            });\n\n            const typedParameters = parameters as z.infer<typeof PlaceBetSchema>;\n\n            // Check balance and allowance first\n            const balanceAllowance = await client.getBalanceAllowance({\n                asset_type: AssetType.COLLATERAL\n            });\n\n            const balance = parseFloat(balanceAllowance.balance);\n            const allowance = parseFloat(balanceAllowance.allowance);\n            const requiredAmount = typedParameters.amount;\n\n            if (balance < requiredAmount) {\n                const errorMsg = `Insufficient USDC balance. You have ${balance} USDC but need ${requiredAmount} USDC for this bet.`;\n                callback?.({ \n                    text: errorMsg,\n                    content: { error: errorMsg, balance, required: requiredAmount }\n                });\n                return false;\n            }\n\n            // Update allowance if needed\n            if (allowance < requiredAmount) {\n                console.log(\"Updating USDC allowance...\");\n                await client.updateBalanceAllowance({\n                    asset_type: AssetType.COLLATERAL\n                });\n            }\n\n            // Calculate order size based on amount and price\n            const orderSize = typedParameters.amount / typedParameters.price;\n\n            // Place the order\n            const order = await client.createAndPostOrder(\n                {\n                    tokenID: typedParameters.tokenId,\n                    price: typedParameters.price,\n                    side: typedParameters.side === \"BUY\" ? Side.BUY : Side.SELL,\n                    size: orderSize,\n                    feeRateBps: 0,\n                },\n                { tickSize: \"0.01\", negRisk: false },\n                OrderType.GTC\n            );\n\n            const responseContext = composeContext({\n                state: currentState,\n                template: `{{recentMessages}}\n\nA bet was placed successfully on Polymarket:\n- Side: ${typedParameters.side}\n- Amount: ${typedParameters.amount} USDC\n- Price: ${typedParameters.price} per share\n- Shares: ${orderSize}\n- Order ID: ${order.orderID}\n\nGenerate a natural response confirming the bet placement.`\n            });\n\n            const response = await generateText({\n                runtime,\n                context: responseContext,\n                modelClass: ModelClass.LARGE,\n            });\n\n            callback?.({ \n                text: response,\n                content: {\n                    success: true,\n                    order,\n                    parameters: typedParameters,\n                    orderSize\n                }\n            });\n            return true;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            callback?.({\n                text: `Error placing bet: ${errorMessage}`,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to bet $10 on Trump winning at 65 cents per share\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll place a $10 bet on Trump winning at $0.65 per share. This will buy approximately 15.38 shares.\",\n                    action: \"PLACE_BET\",\n                },\n            },\n        ],\n    ],\n};\n\n// Check Balance Action\nexport const checkBalanceAction: Action = {\n    name: \"CHECK_BALANCE\",\n    description: \"Check USDC balance and allowance on Polymarket\",\n    similes: [\"balance\", \"funds\", \"money\", \"usdc\", \"check wallet\"],\n    validate: async () => true,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        options?: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const client = await getPolymarketClient();\n            let currentState = state ?? (await runtime.composeState(message));\n\n            const balanceAllowance = await client.getBalanceAllowance({\n                asset_type: AssetType.COLLATERAL\n            });\n\n            const responseContext = composeContext({\n                state: currentState,\n                template: `{{recentMessages}}\n\nPolymarket wallet balance information:\n- USDC Balance: ${balanceAllowance.balance}\n- USDC Allowance: ${balanceAllowance.allowance}\n\nGenerate a natural response with the balance information.`\n            });\n\n            const response = await generateText({\n                runtime,\n                context: responseContext,\n                modelClass: ModelClass.LARGE,\n            });\n\n            callback?.({ \n                text: response,\n                content: {\n                    balance: balanceAllowance.balance,\n                    allowance: balanceAllowance.allowance\n                }\n            });\n            return true;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            callback?.({\n                text: `Error checking balance: ${errorMessage}`,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"What's my balance?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Your current USDC balance on Polymarket is $25.50 with an allowance of $100.00\",\n                    action: \"CHECK_BALANCE\",\n                },\n            },\n        ],\n    ],\n};\n\n// Get Latest Markets Action - ENHANCED VERSION\nexport const getMarketsAction: Action = {\n    name: \"GET_MARKETS\",\n    description: \"Get latest available markets on Polymarket using ClobClient with fresh data\",\n    similes: [\"markets\", \"betting markets\", \"available bets\", \"what can I bet on\", \"latest markets\", \"newest markets\", \"fresh markets\", \"current markets\"],\n    validate: async () => true,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        options?: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const client = await getPolymarketClient();\n            let currentState = state ?? (await runtime.composeState(message));\n\n            const parameterContext = composeContext({\n                state: currentState,\n                template: `{{recentMessages}}\n\nExtract parameters for getting the latest markets:\n- limit: Maximum number of markets to return (optional, default 10, max 20)\n- active: Filter for active markets only (optional, default true)\n\nRespond with a JSON object.`\n            });\n\n            const { object: parameters } = await generateObject({\n                runtime,\n                context: parameterContext,\n                modelClass: ModelClass.LARGE,\n                schema: GetMarketsSchema,\n            });\n\n            const typedParameters = parameters as z.infer<typeof GetMarketsSchema>;\n            const limit = Math.min(typedParameters.limit || 10, 20);\n            const activeOnly = typedParameters.active !== false; // Default to true\n\n            console.log(`Fetching ${limit} latest markets, active only: ${activeOnly}`);\n\n            let allMarkets: any[] = [];\n            \n            try {\n                // Get markets using the available ClobClient method\n                const marketsResponse = await client.getMarkets();\n                let markets = [];\n                \n                // Handle different response formats\n                if (marketsResponse && typeof marketsResponse === 'object') {\n                    if (Array.isArray(marketsResponse)) {\n                        markets = marketsResponse;\n                    } else if (marketsResponse.data && Array.isArray(marketsResponse.data)) {\n                        markets = marketsResponse.data;\n                    }\n                }\n                \n                // Add markets to our collection\n                for (const market of markets) {\n                    const conditionId = market.condition_id || market.conditionId || market.id;\n                    if (conditionId && !allMarkets.some(m => \n                        (m.condition_id || m.conditionId || m.id) === conditionId)) {\n                        allMarkets.push(market);\n                    }\n                }\n\n                console.log(`Found ${allMarkets.length} markets from ClobClient`);\n\n                if (allMarkets.length === 0) {\n                    callback?.({\n                        text: \"No markets found at this time. The Polymarket API may be experiencing issues or returning empty results.\",\n                        content: { markets: [], totalCount: 0 }\n                    });\n                    return true;\n                }\n\n                // Sort by creation date, end date, or activity to get latest markets\n                allMarkets.sort((a, b) => {\n                    // First priority: active markets\n                    const aActive = a.active === true || a.active === \"true\";\n                    const bActive = b.active === true || b.active === \"true\";\n                    \n                    if (aActive && !bActive) return -1;\n                    if (!aActive && bActive) return 1;\n                    \n                    // Second priority: accepting orders\n                    const aAccepting = a.accepting_orders === true;\n                    const bAccepting = b.accepting_orders === true;\n                    \n                    if (aAccepting && !bAccepting) return -1;\n                    if (!aAccepting && bAccepting) return 1;\n                    \n                    // Third priority: end date (markets ending later are \"newer\")\n                    const aEnd = new Date(a.end_date_iso || a.endDate || '1970-01-01').getTime();\n                    const bEnd = new Date(b.end_date_iso || b.endDate || '1970-01-01').getTime();\n                    \n                    if (aEnd !== bEnd) return bEnd - aEnd;\n                    \n                    // Fourth priority: creation date if available\n                    const aCreated = new Date(a.created_date || a.createdAt || '1970-01-01').getTime();\n                    const bCreated = new Date(b.created_date || b.createdAt || '1970-01-01').getTime();\n                    \n                    return bCreated - aCreated;\n                });\n\n                // Filter for active markets if requested\n                if (activeOnly) {\n                    allMarkets = allMarkets.filter((market: any) => {\n                        const isActive = market.active === true || market.active === \"true\";\n                        const isAcceptingOrders = market.accepting_orders === true;\n                        const notClosed = market.closed !== true && market.closed !== \"true\";\n                        const notArchived = market.archived !== true && market.archived !== \"true\";\n                        \n                        // Consider a market \"active\" if it's explicitly active OR accepting orders OR not closed/archived\n                        return isActive || isAcceptingOrders || (notClosed && notArchived);\n                    });\n                    console.log(`Filtered to ${allMarkets.length} active/available markets`);\n                }\n\n                // Get the most recent markets\n                const latestMarkets = allMarkets.slice(0, limit);\n\n                // Process markets with comprehensive data and fresh timestamp\n                const processedMarkets = latestMarkets.map((market: any, index: number) => {\n                    const tokens = market.tokens || market.outcomes || [];\n                    const tokenArray = Array.isArray(tokens) ? tokens : [];\n                    \n                    // Calculate freshness indicator\n                    const endDate = new Date(market.end_date_iso || market.endDate || '2099-12-31');\n                    const now = new Date();\n                    const daysUntilEnd = Math.ceil((endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n                    const freshness = daysUntilEnd > 0 ? daysUntilEnd : 0;\n                    \n                    return {\n                        condition_id: market.condition_id || market.conditionId || market.id,\n                        question_id: market.question_id || market.questionId,\n                        question: market.question || market.title || market.name || 'Unknown Market',\n                        description: market.description ? \n                            (market.description.length > 200 ? \n                                market.description.substring(0, 200) + '...' : \n                                market.description) : \n                            'No description available',\n                        market_slug: market.market_slug || market.slug,\n                        active: market.active,\n                        closed: market.closed,\n                        archived: market.archived,\n                        accepting_orders: market.accepting_orders,\n                        end_date_iso: market.end_date_iso || market.endDate,\n                        created_date: market.created_date || market.createdAt,\n                        minimum_order_size: market.minimum_order_size || market.minOrderSize || '1.00',\n                        minimum_tick_size: market.minimum_tick_size || market.tickSize || '0.01',\n                        icon: market.icon,\n                        image: market.image,\n                        volume: market.volume || market.totalVolume,\n                        liquidity: market.liquidity,\n                        neg_risk: market.neg_risk,\n                        is_50_50_outcome: market.is_50_50_outcome,\n                        tags: Array.isArray(market.tags) ? market.tags.slice(0, 5) : [],\n                        freshness_days: freshness,\n                        tokens: tokenArray.map((token: any) => ({\n                            token_id: token.token_id || token.tokenId || token.id,\n                            outcome: token.outcome || token.name || token.title,\n                            price: token.price || token.lastPrice || '0.50',\n                            winner: token.winner,\n                            volume: token.volume\n                        })),\n                        rewards: market.rewards ? {\n                            min_size: market.rewards.min_size,\n                            max_spread: market.rewards.max_spread,\n                            rates_count: market.rewards.rates?.length || 0,\n                            daily_rate: market.rewards.daily_rate\n                        } : null,\n                        last_updated: new Date().toISOString()\n                    };\n                });\n\n                // Create enhanced market summary with freshness indicators\n                const marketSummary = processedMarkets.map((market: any, index: number) => {\n                    const outcomes = market.tokens.length > 0 ? \n                        market.tokens.map((t: any) => `${t.outcome} ($${t.price})`).join(' vs ') :\n                        'No outcomes available';\n                    \n                    const statusEmoji = market.active ? \"🟢\" : \n                        (market.accepting_orders ? \"🟡\" : \n                        (market.closed ? \"🔴\" : \"⚪\"));\n                    \n                    const freshnessEmoji = market.freshness_days > 30 ? \"🔥\" : \n                        (market.freshness_days > 7 ? \"⚡\" : \"⏰\");\n                    \n                    const tags = market.tags.length > 0 ? market.tags.slice(0, 3).join(', ') : 'No tags';\n                    const endDate = market.end_date_iso ? new Date(market.end_date_iso).toLocaleDateString() : 'No end date';\n                    const volume = market.volume ? `$${parseFloat(market.volume).toLocaleString()}` : 'N/A';\n                    \n                    return `${index + 1}. ${statusEmoji}${freshnessEmoji} ${market.question.substring(0, 70)}${market.question.length > 70 ? '...' : ''}\n   📊 Outcomes: ${outcomes}\n   📈 Volume: ${volume} | 🏷️ Tags: ${tags}\n   💵 Min Order: $${market.minimum_order_size} | 📅 Ends: ${endDate}\n   🎯 ID: ${market.condition_id || 'N/A'}\n   ⏱️  Days remaining: ${market.freshness_days}`;\n                }).join('\\n\\n');\n\n                const responseContext = composeContext({\n                    state: currentState,\n                    template: `{{recentMessages}}\n\nFound ${processedMarkets.length} latest betting markets on Polymarket (sorted by activity and freshness):\n\nLegend: 🟢 Active | 🟡 Accepting Orders | 🔴 Closed | 🔥 Fresh (30+ days) | ⚡ Recent (7+ days) | ⏰ Ending Soon\n\n${marketSummary}\n\nThese are the most current and active markets available for betting right now.\n\nGenerate a response highlighting these latest markets with their key details, emphasizing which ones are most active and fresh for betting.`\n                });\n\n                const responseText = await generateText({\n                    runtime,\n                    context: responseContext,\n                    modelClass: ModelClass.LARGE,\n                });\n\n                callback?.({ \n                    text: responseText,\n                    content: { \n                        markets: processedMarkets,\n                        totalCount: allMarkets.length,\n                        displayedCount: processedMarkets.length,\n                        activeCount: processedMarkets.filter(m => m.active).length,\n                        acceptingOrdersCount: processedMarkets.filter(m => m.accepting_orders).length,\n                        timestamp: new Date().toISOString(),\n                        source: \"ClobClient-Multi\",\n                        sorting: \"freshness_and_activity\",\n                        filters_applied: activeOnly ? [\"active_only\"] : [\"all\"]\n                    }\n                });\n                return true;\n                \n            } catch (clobError) {\n                console.error(\"ClobClient failed:\", clobError);\n                throw new Error(`Failed to fetch latest markets with ClobClient: ${clobError instanceof Error ? clobError.message : String(clobError)}`);\n            }\n            \n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            console.error(\"Get latest markets error:\", errorMessage);\n            callback?.({\n                text: `Error getting latest markets: ${errorMessage}. Please check your Polymarket connection and try again.`,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"What are the latest betting markets available?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here are the latest and most active betting markets on Polymarket, sorted by freshness and activity...\",\n                    action: \"GET_MARKETS\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Show me the newest markets on Polymarket\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll fetch the newest and most current markets for you, prioritizing active ones with recent activity...\",\n                    action: \"GET_MARKETS\",\n                },\n            },\n        ],\n    ],\n};\n\n// Get More Markets Action - Updated to use ClobClient with pagination\nexport const getMoreMarketsAction: Action = {\n    name: \"GET_MORE_MARKETS\",\n    description: \"Get next batch of markets using ClobClient pagination\",\n    similes: [\"more markets\", \"next page\", \"continue\", \"see more\"],\n    validate: async () => true,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        options?: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const client = await getPolymarketClient();\n            let currentState = state ?? (await runtime.composeState(message));\n\n            // For ClobClient, we'll just fetch more markets since it doesn't have cursor-based pagination\n            // We can implement offset-based pagination or just fetch a fresh batch\n            \n            const limit = 10; // Fixed limit for \"more markets\"\n            \n            try {\n                // Get fresh batch of markets\n                const marketsResponse = await client.getMarkets();\n                let markets = [];\n                \n                if (marketsResponse?.data && Array.isArray(marketsResponse.data)) {\n                    markets = marketsResponse.data;\n                } else if (Array.isArray(marketsResponse)) {\n                    markets = marketsResponse;\n                }\n\n                if (markets.length === 0) {\n                    callback?.({\n                        text: \"No additional markets available at this time.\",\n                        content: { endOfResults: true }\n                    });\n                    return true;\n                }\n\n                // Skip first few markets to simulate pagination\n                const startIndex = Math.floor(Math.random() * Math.max(1, markets.length - limit));\n                const paginatedMarkets = markets.slice(startIndex, startIndex + limit);\n\n                // Process markets\n                const processedMarkets = paginatedMarkets.map((market: any) => {\n                    const tokens = market.tokens || market.outcomes || [];\n                    const tokenArray = Array.isArray(tokens) ? tokens : [];\n                    \n                    return {\n                        condition_id: market.condition_id || market.conditionId || market.id,\n                        question: market.question || market.title || 'Unknown Market',\n                        description: market.description ? \n                            (market.description.length > 150 ? \n                                market.description.substring(0, 150) + '...' : \n                                market.description) : \n                            'No description',\n                        active: market.active,\n                        closed: market.closed,\n                        accepting_orders: market.accepting_orders,\n                        end_date_iso: market.end_date_iso || market.endDate,\n                        minimum_order_size: market.minimum_order_size || '1.00',\n                        tags: Array.isArray(market.tags) ? market.tags.slice(0, 5) : [],\n                        tokens: tokenArray.map((token: any) => ({\n                            token_id: token.token_id || token.tokenId || token.id,\n                            outcome: token.outcome || token.name,\n                            price: token.price || token.lastPrice || '0.50',\n                            winner: token.winner\n                        }))\n                    };\n                });\n\n                const marketSummary = processedMarkets.map((market: any, index: number) => {\n                    const outcomes = market.tokens.length > 0 ? \n                        market.tokens.map((t: any) => `${t.outcome} ($${t.price})`).join(' vs ') :\n                        'No outcomes available';\n                    const statusEmoji = market.active ? \"🟢\" : (market.closed ? \"🔴\" : \"🟡\");\n                    const tags = market.tags.length > 0 ? market.tags.slice(0, 3).join(', ') : 'No tags';\n                    \n                    return `${index + 1}. ${statusEmoji} ${market.question.substring(0, 60)}${market.question.length > 60 ? '...' : ''}\n   Outcomes: ${outcomes}\n   Tags: ${tags}\n   Min Order: $${market.minimum_order_size}\n   Ends: ${market.end_date_iso ? new Date(market.end_date_iso).toLocaleDateString() : 'No end date'}`;\n                }).join('\\n\\n');\n\n                const responseContext = composeContext({\n                    state: currentState,\n                    template: `{{recentMessages}}\n\nAdditional markets from Polymarket (${processedMarkets.length} shown):\n${marketSummary}\n\nGenerate a response showing these additional markets with their key details.`\n                });\n\n                const responseText = await generateText({\n                    runtime,\n                    context: responseContext,\n                    modelClass: ModelClass.LARGE,\n                });\n\n                callback?.({ \n                    text: responseText,\n                    content: { \n                        markets: processedMarkets,\n                        count: processedMarkets.length,\n                        hasMore: markets.length > startIndex + limit,\n                        source: \"ClobClient\"\n                    }\n                });\n                return true;\n                \n            } catch (error) {\n                console.error(\"Failed to fetch more markets:\", error);\n                throw new Error(`Failed to get more markets: ${error instanceof Error ? error.message : String(error)}`);\n            }\n            \n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            callback?.({\n                text: `Error getting more markets: ${errorMessage}`,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Show me more markets\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here are additional markets from Polymarket...\",\n                    action: \"GET_MORE_MARKETS\",\n                },\n            },\n        ],\n    ],\n};\n\n// Get Market Action - Updated to use ClobClient\nexport const getMarketAction: Action = {\n    name: \"GET_MARKET\",\n    description: \"Get details of a specific market on Polymarket using ClobClient\",\n    similes: [\"market details\", \"specific market\", \"market info\"],\n    validate: async () => true,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        options?: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const client = await getPolymarketClient();\n            let currentState = state ?? (await runtime.composeState(message));\n\n            const parameterContext = composeContext({\n                state: currentState,\n                template: `{{recentMessages}}\n\nExtract the condition ID for the market to get details for.\n\nRespond with a JSON object containing the conditionId.`\n            });\n\n            const { object: parameters } = await generateObject({\n                runtime,\n                context: parameterContext,\n                modelClass: ModelClass.LARGE,\n                schema: GetMarketSchema,\n            });\n\n            const typedParameters = parameters as z.infer<typeof GetMarketSchema>;\n\n            try {\n                // Use ClobClient to get market details\n                const market = await client.getMarket(typedParameters.conditionId);\n                console.log(\"Market details from ClobClient:\", market);\n\n                // Create comprehensive market summary\n                const tokens = market.tokens || market.outcomes || [];\n                const tokenArray = Array.isArray(tokens) ? tokens : [];\n                \n                const tokenDetails = tokenArray.map((token: any, index: number) => \n                    `   ${index + 1}. ${token.outcome || token.name}: $${token.price || token.lastPrice || 'N/A'} (Token ID: ${token.token_id || token.tokenId || token.id || 'N/A'})`\n                ).join('\\n') || 'No token information available';\n\n                const tagsString = Array.isArray(market.tags) ? market.tags.join(', ') : 'No tags';\n                const rewardInfo = market.rewards ? \n                    `Rewards available: ${market.rewards.daily_rate || 'N/A'}% daily rate, Min size: $${market.rewards.min_size}, Max spread: ${market.rewards.max_spread}%` : \n                    'No rewards program';\n\n                const marketSummary = `\n📊 Market: ${market.question || market.title || market.name || 'Unknown Market'}\n📝 Description: ${market.description || 'No description available'}\n🆔 Condition ID: ${market.condition_id || market.conditionId || market.id || 'N/A'}\n🔗 Market Slug: ${market.market_slug || market.slug || 'N/A'}\n📈 Status: ${market.active ? '🟢 Active' : '🔴 Inactive'} | ${market.accepting_orders ? 'Accepting Orders' : 'Not Accepting Orders'}\n📅 End Date: ${market.end_date_iso || market.endDate ? new Date(market.end_date_iso || market.endDate).toLocaleString() : 'No end date'}\n💰 Min Order Size: $${market.minimum_order_size || market.minOrderSize || '1.00'} | Tick Size: ${market.minimum_tick_size || market.tickSize || '0.01'}\n🏷️ Tags: ${tagsString}\n🎁 ${rewardInfo}\n🔻 Outcomes & Prices:\n${tokenDetails}\n                `;\n\n                const responseContext = composeContext({\n                    state: currentState,\n                    template: `{{recentMessages}}\n\nDetails for the requested Polymarket market:\n\n${marketSummary}\n\nGenerate a natural language response summarizing this market's current status, outcomes, and any rewards if applicable.`\n                });\n\n                const responseText = await generateText({\n                    runtime,\n                    context: responseContext,\n                    modelClass: ModelClass.LARGE,\n                });\n\n                callback?.({\n                    text: responseText,\n                    content: {\n                        market,\n                        summary: marketSummary,\n                        tokenDetails: tokenArray,\n                        conditionId: typedParameters.conditionId\n                    }\n                });\n                return true;\n\n            } catch (marketError) {\n                console.error(\"Failed to fetch market:\", marketError);\n                const errorMsg = marketError instanceof Error ? marketError.message : String(marketError);\n                callback?.({\n                    text: `Error fetching market details: ${errorMsg}`,\n                    content: { error: errorMsg },\n                });\n                return false;\n            }\n\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            callback?.({\n                text: `Error getting market details: ${errorMessage}`,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Show me more info about the Trump vs Biden election market\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here's the full breakdown of the Trump vs Biden election market on Polymarket...\",\n                    action: \"GET_MARKET\",\n                },\n            },\n        ],\n    ],\n};\n","import type { Plugin } from \"@elizaos/core\";\nimport { polymarketProvider } from \"./provider\";\nimport { \n    placeBetAction, \n    checkBalanceAction, \n    getMarketsAction, \n    getMoreMarketsAction,\n    getMarketAction \n} from \"./actions\";\n\n// Initial banner\nconsole.log(\"\\n┌════════════════════════════════════════┐\");\nconsole.log(\"│        POLYMARKET PLUGIN               │\");\nconsole.log(\"├────────────────────────────────────────┤\");\nconsole.log(\"│  Initializing Polymarket Plugin...     │\");\nconsole.log(\"│  Version: 0.0.1                        │\");\nconsole.log(\"└════════════════════════════════════════┘\");\n\nconst initializeActions = () => {\n    try {\n        // Test environment variables\n        const host = process.env.CLOB_API_URL || \"https://clob.polymarket.com\";\n        const chainId = process.env.CHAIN_ID || \"137\"; // Default to Polygon mainnet\n        const apiKey = process.env.POLYMARKET_API_KEY;\n        const secret = process.env.POLYMARKET_SECRET;\n        const passphrase = process.env.POLYMARKET_PASSPHRASE;\n\n        console.log(`🌐 Polymarket Host: ${host}`);\n        console.log(`⛓️  Chain ID: ${chainId}`);\n        \n        if (apiKey && secret && passphrase) {\n            console.log(\"🔐 Authenticated mode: Trading actions available\");\n        } else {\n            console.log(\"📖 Read-only mode: Only market data actions available\");\n            console.log(\"   To enable trading, set POLYMARKET_API_KEY, POLYMARKET_SECRET, and POLYMARKET_PASSPHRASE\");\n        }\n\n        // Return all actions - they will handle auth internally\n        const actions = [\n            getMarketsAction,\n            getMoreMarketsAction, \n            getMarketAction,\n            checkBalanceAction,\n            placeBetAction\n        ];\n\n        console.log(\"✔ Polymarket actions initialized successfully.\");\n        console.log(`📊 Available actions: ${actions.map(a => a.name).join(', ')}`);\n        \n        return actions;\n    } catch (error) {\n        console.error(\"❌ Failed to initialize Polymarket actions:\", error);\n        return []; // Return empty array instead of failing\n    }\n};\n\nexport const polymarketPlugin: Plugin = {\n    name: \"[Polymarket] Integration\",\n    description: \"Polymarket prediction markets integration plugin - get market data and place bets\",\n    providers: [polymarketProvider],\n    evaluators: [],\n    services: [],\n    actions: initializeActions(),\n};\n\nexport default polymarketPlugin;\n\n// Export individual actions for direct use\nexport {\n    placeBetAction,\n    checkBalanceAction, \n    getMarketsAction,\n    getMoreMarketsAction,\n    getMarketAction\n} from \"./actions\";\n\nexport { polymarketProvider, getPolymarketClient } from \"./provider\";"]}